Q1: Explain at least 5 kinds of collections types and when you might use them. Are there certain characteristics that make you choose one over the other?

1) Stack: Stack is a first-in, last-out ordered collection. Therefore, we can use it to store URLs history. The current page that is under viewing is on the top of the stack and the first page is at the base. 

2) Queue: Queue is a first-in, first-out ordered collection. Queue is used in operating systems use a number of different queues to control processes within a computer. Queue is chosen when a resource is shared among multiple users consumers, such as printing tasks. 

Q2:  Explain the difference between a process and thread. How are they related?
A thread is a path to execute the program.  Process is program and state of all the threads executing in the program. Thus, the essential difference between a thread and a process is the work that each one is used to accomplish.Threads are used for small tasks, whereas processes are used for more 'heavyweight' tasks – basically the execution of applications. The overhead of process is more than a thread.

Q3: What threading/process primitives have you worked with? How do you test multi-threaded or multi-process code?
I have downloaded data from Twitter API using multi-process. Another case is to choose optimal parameters combinations for algorithm on Kaggle project. Printing out results at selected step within thread / process is my first choice in small scale. 



Q4: Explain the function of the GIL.
Deadlock was a common problem happens during multi-thread. The Global Interpreter Lock is developed to prevent multi-thread from running CPython codes at the same time. With the popularization of multi-core CPU, the GIL could degrade performance and becames a bottleneck. 

Q5: Describe three challenges of asynchronous, distributed programming
Heterogeneity: Asynchronous programming needs to overcome heterogeneity from hardware devices, operating system, programming languages, network, etc. Middleware, which is a software layer, can be implemented to mask the heterogeneity of the network, hardware, operating system and programing languages. 
Openness: The openness of distributed system is primarily determined by the degree of adding new resource-sharing services. Therefore, a well-defined distributed programming should be easy for developers to add new features or replace sub-systems. 
Concurrency: When several clients attempt to access a shared resource at the same time, the asynchronous programming must be synchronized to keep the shared resource consistent. This can be achieved by standard technique such as semaphores. 

Q6: Have you used a publisher subscriber system? 
Yes, Kafka. Publish-subscribe is that publisher categorizes published messages into classes without knowledge of which subscriber. Kafka runs as a cluster on one or more servers, building real-time streaming data pipelines that get data between publisher and subscriber. 

Q7: Have you programmed in a service oriented architecture before?
No. However, I learned that SOA is a solution for making two software communicate to each other.


Q10: Describe your approach to testing.
I use unit testing and my approach is described as follows: 
Step 1 - create a test module
Step 2 - import unittest module and also the module we want to test
Step 3 - create a test class inherits from unittest.TestCase, which gives access to many test capability within the class
Step 4 - write method to test several cases, including normal and edge cases
Step 5 - if the case is failed, we will check the code indicated from the assertion err



Q11: Explain when, where and why you use: Fakes, Mocks and Stubs? How do these differ?
Fakes, Mocks and Stubs are used in unit testing. They will replace class dependencies and allow isolation of class under test. Fake is used when the class being tested requires specific logic in the dependency. Mock is used when the test requires that the class performs specific actions on the dependency. Stub is used when data is required by the class but the process used to obtain it isn’t relevant to what is being tested. 

- Fakes
    Simplified implementation of a dependency
    Usually code directly without the use of a framework
    Does not provide direct validation of how the class uses the dependency
- Stubs
    Mechanism for injecting data directly into class
    Created using a mocking framework
    Do not provide validation of how the class use the dependency
- Mocks
    Mechanism for validating how a dependency is used by the class
    Created using a mocking framework
    Can provide data and/or logic required by the class


